// –û–ø–∏—Å–∞–Ω–∏–π –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó
import flatpickr from "flatpickr";
// –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —ñ–º–ø–æ—Ä—Ç —Å—Ç–∏–ª—ñ–≤
import "flatpickr/dist/flatpickr.min.css";
// –ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
import Notiflix from 'notiflix';

const pickerDatetime = document.querySelector('input#datetime-picker');
const startBtn = document.querySelector('button[data-start]');
const day = document.querySelector('[data-days]');
const hour = document.querySelector('[data-hours]');
const minute = document.querySelector('[data-minutes]');
const second = document.querySelector('[data-seconds]');

const INTERVAL_DELAY = 1000;
let intervalId = null;
let selectedDate = null;
let currentDate = null;

startBtn.disabled = true;
startBtn.addEventListener('click', onClickTimerStart);

const options = {
  enableTime: true,
  time_24hr: true,
  defaultDate: new Date(),
  minuteIncrement: 1,
  onClose(selectedDates) {
    // console.log(selectedDates[0]);
    onSelectDate(selectedDates);
  },
};

flatpickr(pickerDatetime, options);

Notiflix.Report.info('–ü—Ä–∏–≤—ñ—Ç üôÇ', '–†–∞–¥—ñ –±–∞—á–∏—Ç–∏ –í–∞—Å –Ω–∞ –Ω–∞—à–æ–º—É —Å–∞–π—Ç—ñ!', '–û–∫');

function onSelectDate(selectedDates) {
  selectedDate = selectedDates[0].getTime();
  currentDate = new Date().getTime();
  
  if (selectedDate < currentDate) {
    startBtn.disabled = true;
    Notiflix.Report.failure('–ü–æ–º–∏–ª–∫–∞ ‚ùå', '–í–∏–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É!', '–û–∫');
  } else {
    startBtn.disabled = false;
    Notiflix.Report.success('–ß—É–¥–æ–≤–æ ‚úÖ', '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç!', '–û–∫');
  };
}

function onClickTimerStart() {
  intervalId = setInterval(() => {
    currentDate = new Date().getTime();
    const deltaTime = selectedDate - currentDate;
    updateTimer(convertMs(deltaTime));
    startBtn.disabled = true;
    
    if (selectedDate - currentDate < 1000) {
      clearInterval(intervalId);
      Notiflix.Report.info('–í—ñ—Ç–∞—é üôÇ. –¢–∞–π–º–µ—Ä –∑—É–ø–∏–Ω–∏–≤—Å—è!',
        '–î–ª—è —Ç–æ–≥–æ, —â–æ–± –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–∞–π–º–µ—Ä –∑–Ω–æ–≤—É –≤–∏–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É', '–û–∫');
      startBtn.disabled = false;
    };
  }, INTERVAL_DELAY);
}

function updateTimer({ days, hours, minutes, seconds }) {
  day.textContent = `${days}`;
  hour.textContent = `${hours}`;
  minute.textContent = `${minutes}`;
  second.textContent = `${seconds}`;
}

// –î–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –∑–Ω–∞—á–µ–Ω—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –≥–æ—Ç–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é convertMs, –¥–µ ms - —Ä—ñ–∑–Ω–∏—Ü—è 
// –º—ñ–∂ –∫—ñ–Ω—Ü–µ–≤–æ—é —ñ –ø–æ—Ç–æ—á–Ω–æ—é –¥–∞—Ç–æ—é –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
function convertMs(ms) {
  // Number of milliseconds per unit of time
  const second = 1000;
  const minute = second * 60;
  const hour = minute * 60;
  const day = hour * 24;

  // Remaining days
  const days = addLeadingZero(Math.floor(ms / day));
  // Remaining hours
  const hours = addLeadingZero(Math.floor((ms % day) / hour));
  // Remaining minutes
  const minutes = addLeadingZero(Math.floor(((ms % day) % hour) / minute));
  // Remaining seconds
  const seconds = addLeadingZero(Math.floor((((ms % day) % hour) % minute) / second));

  return { days, hours, minutes, seconds };
}

// console.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}
// console.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}
// console.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}

// –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —Ñ–æ—Ä–º–∞—Ç—É—î –∑–Ω–∞—á–µ–Ω–Ω—è –∑ 5 –≤ 05 
// (–¥–æ–¥–∞—î 0, —è–∫—â–æ –≤ —á–∏—Å–ª—ñ –º–µ–Ω—à–µ –¥–≤–æ—Ö —Å–∏–º–≤–æ–ª—ñ–≤)
function addLeadingZero(value) {
  return String(value).padStart(2, '0');
}
